// Mocks generated by Mockito 5.4.4 from annotations
// in project_kepler/test/unit/fetch_launches_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:project_kepler/domain/entities/launch.dart' as _i6;
import 'package:project_kepler/domain/repositories/api_repository.dart' as _i2;
import 'package:project_kepler/domain/use_cases/get_all_launches_use_case.dart'
    as _i4;
import 'package:project_kepler/presentation/utils/language_detection_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiRepository_0 extends _i1.SmartFake implements _i2.ApiRepository {
  _FakeApiRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLanguageDetectionService_1 extends _i1.SmartFake
    implements _i3.LanguageDetectionService {
  _FakeLanguageDetectionService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllLaunchesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllLaunchesUseCase extends _i1.Mock
    implements _i4.GetAllLaunchesUseCase {
  @override
  _i2.ApiRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeApiRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeApiRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ApiRepository);

  @override
  _i3.LanguageDetectionService get languageDetectionService =>
      (super.noSuchMethod(
        Invocation.getter(#languageDetectionService),
        returnValue: _FakeLanguageDetectionService_1(
          this,
          Invocation.getter(#languageDetectionService),
        ),
        returnValueForMissingStub: _FakeLanguageDetectionService_1(
          this,
          Invocation.getter(#languageDetectionService),
        ),
      ) as _i3.LanguageDetectionService);

  @override
  _i5.Future<List<_i6.Launch>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Launch>>.value(<_i6.Launch>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.Launch>>.value(<_i6.Launch>[]),
      ) as _i5.Future<List<_i6.Launch>>);
}
