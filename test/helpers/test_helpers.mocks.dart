// Mocks generated by Mockito 5.4.4 from annotations
// in project_kepler/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i13;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i14;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i16;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i19;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i18;
import 'package:flutter_local_notifications/src/types.dart' as _i20;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:project_kepler/domain/entities/agency.dart' as _i9;
import 'package:project_kepler/domain/entities/article.dart' as _i11;
import 'package:project_kepler/domain/entities/event.dart' as _i3;
import 'package:project_kepler/domain/entities/launch.dart' as _i2;
import 'package:project_kepler/domain/entities/translatable.dart' as _i7;
import 'package:project_kepler/domain/repositories/article_repository.dart'
    as _i4;
import 'package:project_kepler/domain/repositories/space_devs_repository.dart'
    as _i6;
import 'package:project_kepler/domain/use_cases/fetch_articles_use_case.dart'
    as _i10;
import 'package:project_kepler/domain/use_cases/get_all_launches_use_case.dart'
    as _i12;
import 'package:project_kepler/presentation/utils/language_detection_service.dart'
    as _i5;
import 'package:timezone/timezone.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLaunch_0 extends _i1.SmartFake implements _i2.Launch {
  _FakeLaunch_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEvent_1 extends _i1.SmartFake implements _i3.Event {
  _FakeEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleRepository_2 extends _i1.SmartFake
    implements _i4.ArticleRepository {
  _FakeArticleRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLanguageDetectionService_3 extends _i1.SmartFake
    implements _i5.LanguageDetectionService {
  _FakeLanguageDetectionService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpaceDevsRepository_4 extends _i1.SmartFake
    implements _i6.SpaceDevsRepository {
  _FakeSpaceDevsRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTranslatable_5 extends _i1.SmartFake implements _i7.Translatable {
  _FakeTranslatable_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpaceDevsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpaceDevsRepository extends _i1.Mock
    implements _i6.SpaceDevsRepository {
  @override
  _i8.Future<List<_i2.Launch>> getUpcomingLaunchList() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingLaunchList,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);

  @override
  _i8.Future<List<_i2.Launch>> getLaunchList() => (super.noSuchMethod(
        Invocation.method(
          #getLaunchList,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);

  @override
  _i8.Future<_i2.Launch> getLaunchDetailsById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLaunchDetailsById,
          [id],
        ),
        returnValue: _i8.Future<_i2.Launch>.value(_FakeLaunch_0(
          this,
          Invocation.method(
            #getLaunchDetailsById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i2.Launch>.value(_FakeLaunch_0(
          this,
          Invocation.method(
            #getLaunchDetailsById,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Launch>);

  @override
  _i8.Future<List<_i3.Event>> getAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Event>>.value(<_i3.Event>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i8.Future<List<_i3.Event>>);

  @override
  _i8.Future<_i3.Event> getEventById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [id],
        ),
        returnValue: _i8.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #getEventById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #getEventById,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Event>);

  @override
  _i8.Future<_i9.Agency?> getAgencyById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAgencyById,
          [id],
        ),
        returnValue: _i8.Future<_i9.Agency?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.Agency?>.value(),
      ) as _i8.Future<_i9.Agency?>);
}

/// A class which mocks [FetchArticlesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchArticlesUseCase extends _i1.Mock
    implements _i10.FetchArticlesUseCase {
  @override
  _i4.ArticleRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeArticleRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeArticleRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ArticleRepository);

  @override
  _i5.LanguageDetectionService get languageDetectionService =>
      (super.noSuchMethod(
        Invocation.getter(#languageDetectionService),
        returnValue: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
        returnValueForMissingStub: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
      ) as _i5.LanguageDetectionService);

  @override
  _i8.Future<List<_i11.Article>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<List<_i11.Article>>.value(<_i11.Article>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.Article>>.value(<_i11.Article>[]),
      ) as _i8.Future<List<_i11.Article>>);
}

/// A class which mocks [GetAllLaunchesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllLaunchesUseCase extends _i1.Mock
    implements _i12.GetAllLaunchesUseCase {
  @override
  _i6.SpaceDevsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSpaceDevsRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeSpaceDevsRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.SpaceDevsRepository);

  @override
  _i5.LanguageDetectionService get languageDetectionService =>
      (super.noSuchMethod(
        Invocation.getter(#languageDetectionService),
        returnValue: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
        returnValueForMissingStub: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
      ) as _i5.LanguageDetectionService);

  @override
  _i8.Future<List<_i2.Launch>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);

  @override
  void someFunction() => super.noSuchMethod(
        Invocation.method(
          #someFunction,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LanguageDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageDetectionService extends _i1.Mock
    implements _i5.LanguageDetectionService {
  @override
  _i8.Future<_i7.Translatable> translateIfNecessary(_i7.Translatable? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #translateIfNecessary,
          [model],
        ),
        returnValue: _i8.Future<_i7.Translatable>.value(_FakeTranslatable_5(
          this,
          Invocation.method(
            #translateIfNecessary,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Translatable>.value(_FakeTranslatable_5(
          this,
          Invocation.method(
            #translateIfNecessary,
            [model],
          ),
        )),
      ) as _i8.Future<_i7.Translatable>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i13.FlutterLocalNotificationsPlugin {
  @override
  _i8.Future<bool?> initialize(
    _i14.InitializationSettings? initializationSettings, {
    _i15.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i15.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i8.Future<bool?>.value(),
        returnValueForMissingStub: _i8.Future<bool?>.value(),
      ) as _i8.Future<bool?>);

  @override
  _i8.Future<_i15.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue: _i8.Future<_i15.NotificationAppLaunchDetails?>.value(),
            returnValueForMissingStub:
                _i8.Future<_i15.NotificationAppLaunchDetails?>.value(),
          ) as _i8.Future<_i15.NotificationAppLaunchDetails?>);

  @override
  _i8.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i16.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
            notificationDetails,
          ],
          {#payload: payload},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i17.TZDateTime? scheduledDate,
    _i16.NotificationDetails? notificationDetails, {
    required _i18.UILocalNotificationDateInterpretation?
        uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i19.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i20.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i15.RepeatInterval? repeatInterval,
    _i16.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i19.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails,
          ],
          {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i15.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue:
                _i8.Future<List<_i15.PendingNotificationRequest>>.value(
                    <_i15.PendingNotificationRequest>[]),
            returnValueForMissingStub:
                _i8.Future<List<_i15.PendingNotificationRequest>>.value(
                    <_i15.PendingNotificationRequest>[]),
          ) as _i8.Future<List<_i15.PendingNotificationRequest>>);

  @override
  _i8.Future<List<_i15.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i8.Future<List<_i15.ActiveNotification>>.value(
            <_i15.ActiveNotification>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i15.ActiveNotification>>.value(
                <_i15.ActiveNotification>[]),
      ) as _i8.Future<List<_i15.ActiveNotification>>);
}
