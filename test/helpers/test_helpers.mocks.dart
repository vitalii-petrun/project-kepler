// Mocks generated by Mockito 5.4.4 from annotations
// in project_kepler/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:project_kepler/domain/entities/agency.dart' as _i9;
import 'package:project_kepler/domain/entities/article.dart' as _i11;
import 'package:project_kepler/domain/entities/event.dart' as _i3;
import 'package:project_kepler/domain/entities/launch.dart' as _i2;
import 'package:project_kepler/domain/entities/translatable.dart' as _i6;
import 'package:project_kepler/domain/repositories/article_repository.dart'
    as _i4;
import 'package:project_kepler/domain/repositories/space_devs_repository.dart'
    as _i7;
import 'package:project_kepler/domain/use_cases/fetch_articles_use_case.dart'
    as _i10;
import 'package:project_kepler/domain/use_cases/get_all_launches_use_case.dart'
    as _i12;
import 'package:project_kepler/presentation/utils/language_detection_service.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLaunch_0 extends _i1.SmartFake implements _i2.Launch {
  _FakeLaunch_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEvent_1 extends _i1.SmartFake implements _i3.Event {
  _FakeEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleRepository_2 extends _i1.SmartFake
    implements _i4.ArticleRepository {
  _FakeArticleRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLanguageDetectionService_3 extends _i1.SmartFake
    implements _i5.LanguageDetectionService {
  _FakeLanguageDetectionService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTranslatable_4 extends _i1.SmartFake implements _i6.Translatable {
  _FakeTranslatable_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpaceDevsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpaceDevsRepository extends _i1.Mock
    implements _i7.SpaceDevsRepository {
  @override
  _i8.Future<List<_i2.Launch>> getUpcomingLaunchList() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingLaunchList,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);

  @override
  _i8.Future<List<_i2.Launch>> getLaunchList() => (super.noSuchMethod(
        Invocation.method(
          #getLaunchList,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);

  @override
  _i8.Future<_i2.Launch> getLaunchDetailsById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLaunchDetailsById,
          [id],
        ),
        returnValue: _i8.Future<_i2.Launch>.value(_FakeLaunch_0(
          this,
          Invocation.method(
            #getLaunchDetailsById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i2.Launch>.value(_FakeLaunch_0(
          this,
          Invocation.method(
            #getLaunchDetailsById,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Launch>);

  @override
  _i8.Future<List<_i3.Event>> getAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Event>>.value(<_i3.Event>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i8.Future<List<_i3.Event>>);

  @override
  _i8.Future<_i3.Event> getEventById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [id],
        ),
        returnValue: _i8.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #getEventById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #getEventById,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Event>);

  @override
  _i8.Future<_i9.Agency?> getAgencyById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAgencyById,
          [id],
        ),
        returnValue: _i8.Future<_i9.Agency?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.Agency?>.value(),
      ) as _i8.Future<_i9.Agency?>);
}

/// A class which mocks [FetchArticlesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchArticlesUseCase extends _i1.Mock
    implements _i10.FetchArticlesUseCase {
  @override
  _i4.ArticleRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeArticleRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeArticleRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ArticleRepository);

  @override
  _i5.LanguageDetectionService get languageDetectionService =>
      (super.noSuchMethod(
        Invocation.getter(#languageDetectionService),
        returnValue: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
        returnValueForMissingStub: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
      ) as _i5.LanguageDetectionService);

  @override
  _i8.Future<List<_i11.Article>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<List<_i11.Article>>.value(<_i11.Article>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.Article>>.value(<_i11.Article>[]),
      ) as _i8.Future<List<_i11.Article>>);
}

/// A class which mocks [GetAllLaunchesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllLaunchesUseCase extends _i1.Mock
    implements _i12.GetAllLaunchesUseCase {
  @override
  _i5.LanguageDetectionService get languageDetectionService =>
      (super.noSuchMethod(
        Invocation.getter(#languageDetectionService),
        returnValue: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
        returnValueForMissingStub: _FakeLanguageDetectionService_3(
          this,
          Invocation.getter(#languageDetectionService),
        ),
      ) as _i5.LanguageDetectionService);

  @override
  _i8.Future<List<_i2.Launch>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Launch>>.value(<_i2.Launch>[]),
      ) as _i8.Future<List<_i2.Launch>>);
}

/// A class which mocks [LanguageDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageDetectionService extends _i1.Mock
    implements _i5.LanguageDetectionService {
  @override
  _i8.Future<_i6.Translatable> translateIfNecessary(_i6.Translatable? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #translateIfNecessary,
          [model],
        ),
        returnValue: _i8.Future<_i6.Translatable>.value(_FakeTranslatable_4(
          this,
          Invocation.method(
            #translateIfNecessary,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.Translatable>.value(_FakeTranslatable_4(
          this,
          Invocation.method(
            #translateIfNecessary,
            [model],
          ),
        )),
      ) as _i8.Future<_i6.Translatable>);
}
